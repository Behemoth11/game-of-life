import test from 'ava';
import Directive from './directive';
test('Linear directive should work', (ctx) => {
    const test = `
1, 2,    3, 4, 5, 6,
`.trim();
    const reader = new Directive.Reader(test);
    ctx.is(reader.next(), 1);
    ctx.is(reader.next(), 2);
    ctx.is(reader.next(), 3);
});
test('New line should be correctly parsed', (ctx) => {
    const test = `
1, 2,  3,
4, 5, 6,
`.trim();
    const reader = new Directive.Reader(test);
    ctx.is(reader.next(), 1);
    ctx.is(reader.next(), 2);
    ctx.is(reader.next(), 3);
    ctx.is(reader.next(), '\n');
    ctx.is(reader.next(), 4);
});
test('Jump command should be correctly parsed', (ctx) => {
    const test = `
1, 2, 3,
->6, 4, 5, 6,
`.trim();
    const reader = new Directive.Reader(test);
    ctx.is(reader.next(), 1);
    ctx.is(reader.next(), 2);
    ctx.is(reader.next(), 3);
    ctx.is(reader.next(), '\n');
    ctx.is(reader.next(), '->');
    ctx.is(reader.next_chunk_before(','), '6');
    ctx.is(reader.next(), 4);
});
test('Should parse sever digit numbers', (ctx) => {
    const test = `
1, 25, 3,
4, 5600, 6,
`.trim();
    const reader = new Directive.Reader(test);
    ctx.is(reader.next(), 1);
    ctx.is(reader.next(), 25);
    ctx.is(reader.next(), 3);
    ctx.is(reader.next(), '\n');
    ctx.is(reader.next(), 4);
    ctx.is(reader.next(), 5600);
});
test('Composition command should be correctly parsed', (ctx) => {
    const test = `
1, 2, 3,
-|space_ship.500, 4, 5, 6,
`.trim();
    const reader = new Directive.Reader(test);
    ctx.is(reader.next(), 1);
    ctx.is(reader.next(), 2);
    ctx.is(reader.next(), 3);
    ctx.is(reader.next(), '\n');
    ctx.is(reader.next(), '-|');
    ctx.is(reader.next_chunk_before(','), 'space_ship.500');
    ctx.is(reader.next(), 4);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVhZGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL0NvbmZpZ3VyYXRpb24vUmVhZGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBRXZCLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUVwQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUMzQyxNQUFNLElBQUksR0FBRzs7Q0FFZCxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVAsTUFBTSxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDbEQsTUFBTSxJQUFJLEdBQUc7OztDQUdkLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFUCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMseUNBQXlDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUN0RCxNQUFNLElBQUksR0FBRzs7O0NBR2QsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVQLE1BQU0sTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUU1QixHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QixHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVyRCxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO0lBQy9DLE1BQU0sSUFBSSxHQUFHOzs7Q0FHZCxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVAsTUFBTSxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdEQUFnRCxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDN0QsTUFBTSxJQUFJLEdBQUc7OztDQUdkLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFUCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUVsRSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQyJ9